abbr -a yr 'cal -y'
abbr -a c cargo
abbr -a e nvim
abbr -a m make
abbr -a o open
abbr -a g git
abbr -a gc 'git checkout'
abbr -a ga 'git add -p'
abbr -a vimdiff 'nvim -d'
abbr -a ct 'cargo t'
abbr -a gah 'git stash; and git pull --rebase; and git stash pop'
abbr -a ks 'keybase chat send'
abbr -a kr 'keybase chat read'
abbr -a kl 'keybase chat list'
abbr -a pr 'gh pr create -t (git show -s --format=%s HEAD) -b (git show -s --format=%B HEAD | tail -n+3)'

if status --is-interactive
    if test -d ~/dev/others/base16/templates/fish-shell
        set fish_function_path $fish_function_path ~/dev/others/base16/templates/fish-shell/functions
        builtin source ~/dev/others/base16/templates/fish-shell/conf.d/base16.fish
    end
end

if command -v brew >/dev/null
    abbr -a b brew
    abbr -a bi 'brew install'
    abbr -a bu 'brew update'
    abbr -a bup 'brew upgrade'
end

if command -v eza >/dev/null
    abbr -a l eza
    abbr -a ls eza
    abbr -a ll 'eza -l'
    abbr -a lll 'eza -la'
else
    abbr -a l ls
    abbr -a ll 'ls -l'
    abbr -a lll 'ls -la'
end

if test -f /opt/homebrew/share/autojump/autojump.fish
    source /opt/homebrew/share/autojump/autojump.fish
end

function pwl
    set -Ux OP_SESSION_my (pw signin my --raw)
end

function ssh
    /usr/bin/ssh $argv
end

function apass
    if test (count $argv) -ne 1
        pass $argv
        return
    end

    asend (pass $argv[1] | head -n1)
end

function qrpass
    if test (count $argv) -ne 1
        pass $argv
        return
    end

    qrsend (pass $argv[1] | head -n1)
end

function asend
    if test (count $argv) -ne 1
        echo "No argument given"
        return
    end

    # Note: adb might need to be installed separately on macOS
    adb shell input text (echo $argv[1] | sed -e 's/ /%s/g' -e 's/\([#[()<>{}$|;&*\\~"\'`]\)/\\\\\1/g')
end

function qrsend
    if test (count $argv) -ne 1
        echo "No argument given"
        return
    end

    # Note: qrencode and feh might need to be installed via Homebrew
    qrencode -o - $argv[1] | open -f -a Preview
end

# Type - to move up to top parent dir which is a repository
function d
    while test $PWD != /
        if test -d .git
            break
        end
        cd ..
    end
end

# Fish git prompt
set __fish_git_prompt_showuntrackedfiles yes
set __fish_git_prompt_showdirtystate yes
set __fish_git_prompt_showstashstate ''
set __fish_git_prompt_showupstream none
set -g fish_prompt_pwd_dir_length 3

# colored man output
# from http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
setenv LESS_TERMCAP_mb \e'[01;31m' # begin blinking
setenv LESS_TERMCAP_md \e'[01;38;5;74m' # begin bold
setenv LESS_TERMCAP_me \e'[0m' # end mode
setenv LESS_TERMCAP_se \e'[0m' # end standout-mode
setenv LESS_TERMCAP_so \e'[38;5;246m' # begin standout-mode - info box
setenv LESS_TERMCAP_ue \e'[0m' # end underline
setenv LESS_TERMCAP_us \e'[04;38;5;146m' # begin underline

setenv FZF_DEFAULT_COMMAND 'fd --type file --follow'
setenv FZF_CTRL_T_COMMAND 'fd --type file --follow'
setenv FZF_DEFAULT_OPTS '--height 20%'

function fish_user_key_bindings
    bind \cz 'fg>/dev/null ^/dev/null'
    if functions -q fzf_key_bindings
        fzf_key_bindings
    end
end

if test (hostname -s) = Dikshants-MacBook-Air
    set -g fish_prompt_hostname LittleEle
else
    set -g fish_prompt_hostname (hostname -s)
end

function fish_prompt
    set_color brblack
    echo -n "["(date "+%H:%M")"] "
    set_color blue
    # echo -n (hostname -s)
    echo -n $fish_prompt_hostname
    if [ $PWD != $HOME ]
        set_color brblack
        echo -n ':'
        set_color yellow
        echo -n (basename $PWD)
    end
    set_color green
    printf '%s ' (__fish_git_prompt)
    set_color red
    echo -n '| '
    set_color normal
end

function fish_greeting
    echo
    echo -e (uname -mrs | awk '{print " \\\\e[1mOS: \\\\e[0;32m"$0"\\\\e[0m"}')
    echo -e (uptime | sed 's/^up //' | awk '{print " \\\\e[1mUptime: \\\\e[0;32m"$0"\\\\e[0m"}')
    echo -e (hostname -s | awk '{print " \\\\e[1mHostname: \\\\e[0;32m"$0"\\\\e[0m"}')
    echo -e " \\e[1mDisk usage:\\e[0m"
    echo
    echo -ne (\
        df -l -h | grep -E 'disk0s2' | \
        awk '{printf "\\\\t%s\\\\t%4s / %4s  %s\\\\n\n", $9, $4, $2, $5}' | \
        sed -e 's/^\(.*\([8][5-9]\|[9][0-9]\)%.*\)$/\\\\e[0;31m\1\\\\e[0m/' -e 's/^\(.*\([7][5-9]\|[8][0-4]\)%.*\)$/\\\\e[0;33m\1\\\\e[0m/' | \
        paste -sd ''\
    )
    echo

    # echo -e " \\e[1mNetwork:\\e[0m"
    # echo
    # echo -ne (\
    #     ifconfig | grep -E 'en0|en1' | \
    #     awk '/inet / {print $2}' | \
    #     sort | \
    #     sed -e 's/^/ /' | \
    #     sed -e 's/$/ /' | \
    #     # public addresses are underlined for visibility \
    #     sed 's/ \([^ ]\+\)$/ \\\e[4m\1/' | \
    #     # private addresses are not \
    #     sed 's/m\(\(10\.\|172\.\(1[6-9]\|2[0-9]\|3[01]\)\|192\.168\.\).*\)/m\\\e[24m\1/' | \
    #     sed 's/$/\\\e[0m/' | \
    #     sed 's/^/\t/' \
    # )
    # echo

    echo -e " \\e[1mNetwork:\\e[0m"
    echo
    set -l ip (ifconfig en0 | grep inet | grep -v inet6 | cut -d ' ' -f2)
    if test -n "$ip"
        echo -e "\\ten0: \\e[0;32m$ip\\e[0m"
    else
        echo -e "\\tNo IP address found for en0"
    end
    echo

    set r (random 0 100)
    if [ $r -lt 5 ] # only occasionally show backlog (5%)
        echo -e " \e[1mBacklog\e[0;32m"
        set_color blue
        echo "  [project] <description >"
        echo
    end

    set_color normal
    echo -e " \e[1mTODOs\e[0;32m"
    echo
    if [ $r -lt 10 ]
        # unimportant, so show rarely
        set_color cyan
        # echo "  [project] <description >"
    end
    if [ $r -lt 25 ]
        # back-of-my-mind, so show occasionally
        set_color green
        # echo " [project] <description >"
    end
    if [ $r -lt 50 ]
        # upcoming, so prompt regularly
        set_color yellow
        # echo " [project] <description >"
    end

    # urgent, so prompt always
    set_color red
    # echo " [project] <description >"

    echo

    if test -s ~/todo
        set_color magenta
        cat todo | sed 's/^/ /'
        echo
    end

    set_color normal
end
